1. basic local command for create repo and commit
   git init  # create a repo locally
   git add  file_name or dir # 添加文件到暂存区
   git commit  # 将暂存区的文件提交到本地分支
   git status  # 查看工作区状态（没有跟踪的文件，没有提交的文件等）
   git diff  # 查看工作区与暂存区之间的diff
   git log  # 查看提交的log（已经同步到远程仓库的已经本地分支的）
   git reset --hard version_id # 回退版本到指定版本
   git reflog # 查看命令历史
   git checkout -- file_name # 直接丢弃工作区的修改
   git rm file_name # 删除指定文件

2. remote repo
   git remote add origin git@github.com:github_user_name/learngit.git  # 关联到远程库，远程库的名字为origin
   git push -u origin master  # 把本地库的所有内容提交到远程库，即把master分支推送到远程，并且通过-u把本地库与远程库关联起来
   git push origin master  # 将本地的最新修改提交到github
   git clone git@github.com:michaelliao/gitskills.git # 克隆远程某用户的某仓库到本地
   git pull --rebase origin master # 当他人提交改动到远程仓库后，若此时自己也要提交改动，必须先将远程仓库的改动拉下来，然后与本地库进行合并，即为这条指令

3. manage branck=h
   git checkout -b branch_name # 创建新分支，并且切换到新分支
   git branch branch_name # 创建新的分支
   git checkout branch_name # 切换到新的分支
   git branch # 查看当前分支
   git merge branch_name # 合并指定分支到当前分支
   git branch -d branch_name # 删除指定的分支
   git log --graph  # 查看提交日志，以图展示
   
   当前工作还没做完就要去修复bug：
   git stash # 把当前的工作区存储起来，因为还没有改完，打算改完再提交
   git stash pop # 把存储的工作区恢复出来
   git stash list  # 查看储存的工作区列表
   git branch -D branch_name # 强行删除没有merge的分支
   
   a.分支策略：
   master 分支一般用于发布新版本，因此是十分稳定的；干活一般都在dev分支上，也就>是说dev分支是不稳定的，到了某个版本成熟的时候，才把dev分支合并到master分支。
   每个人都在dev分支上面干活，然后每个人都在dev分支的基础上有自己的分支，并且把>提交都提交到dev分支上。

   






